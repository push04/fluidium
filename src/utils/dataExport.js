/**
 * Fluidium - Data Export Utilities
 * Export simulation data in various formats (CSV, JSON, PDF)
 */

// ============================================================================
// CSV EXPORT
// ============================================================================

export const exportToCSV = (data, filename = 'fluidium-data') => {
  if (!data || data.length === 0) {
    console.warn('No data to export')
    return
  }

  const headers = Object.keys(data[0])
  const rows = data.map(row => headers.map(header => row[header]).join(','))
  const csv = [headers.join(','), ...rows].join('\n')

  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)

  link.setAttribute('href', url)
  link.setAttribute('download', `${filename}-${Date.now()}.csv`)
  link.style.visibility = 'hidden'

  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// ============================================================================
// JSON EXPORT
// ============================================================================

export const exportToJSON = (data, filename = 'fluidium-data', experiment = 'Unknown') => {
  const exportData = {
    exportDate: new Date().toISOString(),
    experiment,
    dataCount: data.length,
    data,
  }

  const json = JSON.stringify(exportData, null, 2)
  const blob = new Blob([json], { type: 'application/json;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)

  link.setAttribute('href', url)
  link.setAttribute('download', `${filename}-${Date.now()}.json`)
  link.style.visibility = 'hidden'

  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// ============================================================================
// LAB REPORT GENERATION
// ============================================================================

export const generateLabReport = (experimentData) => {
  const {
    experimentName,
    objective,
    apparatus,
    theory,
    procedure,
    observations,
    results,
    conclusion,
    studentName,
    date,
  } = experimentData

  const report = `
FLUIDIUM - VIRTUAL LAB REPORT
================================================================================

Experiment: ${experimentName}
Date: ${date || new Date().toLocaleDateString()}
Student Name: ${studentName || 'Not Provided'}

================================================================================
1. OBJECTIVE
================================================================================
${objective || 'Not provided'}

================================================================================
2. APPARATUS
================================================================================
${apparatus || 'Not provided'}

================================================================================
3. THEORY
================================================================================
${theory || 'Not provided'}

================================================================================
4. PROCEDURE
================================================================================
${procedure || 'Not provided'}

================================================================================
5. OBSERVATIONS
================================================================================
${Array.isArray(observations)
    ? observations
        .map(
          (obs, idx) =>
            `Observation ${idx + 1}:\n${Object.entries(obs)
              .map(([key, value]) => `  ${key}: ${value}`)
              .join('\n')}`
        )
        .join('\n\n')
    : 'Not provided'}

================================================================================
6. RESULTS & CALCULATIONS
================================================================================
${Array.isArray(results)
    ? results.map((res) => `${res}`).join('\n')
    : typeof results === 'object'
    ? Object.entries(results)
        .map(([key, value]) => `${key}: ${value}`)
        .join('\n')
    : results || 'Not provided'}

================================================================================
7. CONCLUSION
================================================================================
${conclusion || 'Not provided'}

================================================================================
Generated by Fluidium - Virtual Engineering Lab
${new Date().toLocaleString()}
================================================================================
  `

  return report
}

export const exportLabReport = (reportContent, filename = 'lab-report') => {
  const blob = new Blob([reportContent], { type: 'text/plain;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)

  link.setAttribute('href', url)
  link.setAttribute('download', `${filename}-${Date.now()}.txt`)
  link.style.visibility = 'hidden'

  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// ============================================================================
// DATA TABLE EXPORT
// ============================================================================

export const exportTableToExcel = (tableData, filename = 'fluidium-table') => {
  // Note: For full Excel support, use 'exceljs' or 'xlsx' library
  // This is a simplified CSV version

  if (!tableData || tableData.length === 0) {
    console.warn('No table data to export')
    return
  }

  const headers = Object.keys(tableData[0])
  const rows = tableData.map(row => headers.map(h => row[h] || '').join('\t'))
  const tsv = [headers.join('\t'), ...rows].join('\n')

  const blob = new Blob([tsv], { type: 'text/tab-separated-values;charset=utf-8;' })
  const link = document.createElement('a')
  const url = URL.createObjectURL(blob)

  link.setAttribute('href', url)
  link.setAttribute('download', `${filename}-${Date.now()}.tsv`)
  link.style.visibility = 'hidden'

  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// ============================================================================
// SCREENSHOT / IMAGE EXPORT
// ============================================================================

export const exportCanvasAsImage = (canvasRef, filename = 'simulation') => {
  if (!canvasRef || !canvasRef.current) {
    console.warn('Canvas reference not available')
    return
  }

  const canvas = canvasRef.current
  const link = document.createElement('a')
  link.href = canvas.toDataURL('image/png')
  link.download = `${filename}-${Date.now()}.png`
  link.style.visibility = 'hidden'

  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
}

// ============================================================================
// BULK DATA EXPORT
// ============================================================================

export const exportAllData = (experimentData, format = 'json') => {
  const timestamp = new Date().toISOString()
  const filename = `fluidium-export-${timestamp.split('T')[0]}`

  if (format === 'json') {
    exportToJSON(experimentData, filename)
  } else if (format === 'csv') {
    exportToCSV(experimentData, filename)
  }
}

// ============================================================================
// IMPORT DATA
// ============================================================================

export const importFromJSON = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()

    reader.onload = (event) => {
      try {
        const data = JSON.parse(event.target.result)
        resolve(data)
      } catch (error) {
        reject(new Error('Invalid JSON file'))
      }
    }

    reader.onerror = () => {
      reject(new Error('Error reading file'))
    }

    reader.readAsText(file)
  })
}

export const importFromCSV = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()

    reader.onload = (event) => {
      try {
        const csv = event.target.result
        const lines = csv.split('\n')
        const headers = lines[0].split(',')

        const data = lines.slice(1).map(line => {
          const values = line.split(',')
          const row = {}
          headers.forEach((header, idx) => {
            row[header.trim()] = isNaN(values[idx]) ? values[idx].trim() : parseFloat(values[idx])
          })
          return row
        })

        resolve(data)
      } catch (error) {
        reject(new Error('Error parsing CSV file'))
      }
    }

    reader.onerror = () => {
      reject(new Error('Error reading file'))
    }

    reader.readAsText(file)
  })
}

// ============================================================================
// PRINT FUNCTIONALITY
// ============================================================================

export const printLabReport = (content) => {
  const printWindow = window.open('', '', 'height=400,width=600')
  printWindow.document.write(`
    <html>
      <head>
        <title>Fluidium Lab Report</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; }
          h1 { color: #4f46e5; border-bottom: 2px solid #4f46e5; }
          h2 { color: #4f46e5; margin-top: 20px; }
          pre { background: #f3f4f6; padding: 10px; border-radius: 5px; overflow-x: auto; }
        </style>
      </head>
      <body>
        <pre>${content}</pre>
      </body>
    </html>
  `)
  printWindow.document.close()
  printWindow.print()
}

// ============================================================================
// DATA VALIDATION
// ============================================================================

export const validateExportData = (data) => {
  if (!data) return false
  if (typeof data !== 'object') return false
  if (Array.isArray(data) && data.length === 0) return false
  return true
}

export const sanitizeFilename = (filename) => {
  return filename.replace(/[^a-zA-Z0-9-_]/g, '_').toLowerCase()
}
